//  Copyright 2020 Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Forschung e.V.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  https:www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

#ifndef CONTAINERVISUALIZATION_H
#define CONTAINERVISUALIZATION_H

// std C++ includes
#include <map>
#include <math.h>
#include <random>
#include <vector>

// ros includes
#include <ros/ros.h>
#include <tf2_ros/buffer.h>
#include <tf2_ros/transform_broadcaster.h>

// ros msgs includes
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PolygonStamped.h>
#include <interactive_markers/interactive_marker_server.h>
#include <interactive_markers/menu_handler.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>

// own includes
#include <mars_common/Id.h>
#include <mars_topology_common/TopologyEntityType.h>
#include <mars_topology_common/utility/EntityVisualization.h>
#include <mars_topology_edge/MarsEdge.h>
#include <mars_topology_vertex/MarsVertex.h>

namespace mars
{
namespace topology
{
namespace container
{
class ContainerVisualization
{
public:
  ContainerVisualization();

  ContainerVisualization(const mars::common::Id& pContainerId);

  void setContainerId(const mars::common::Id& pContainerId);

  void addInteractiveMarker(const visualization_msgs::Marker& pMarker,
                            std::shared_ptr<mars::topology::common::TopologyEntity> pTopologyEntity,
                            const std::string& pMarkerFrame);

  void
  drawFootprint(const std::unordered_map<mars::common::Id,
                                         std::shared_ptr<mars::topology::common::TopologyEntity>>
                    pContainer,
                const ros::Publisher& markerPub, const std::string& markerFrame);

  void drawDirection(
      const mars::common::Id& pContainerId,
      const std::unordered_map<mars::common::Id, std::shared_ptr<mars::topology::edge::MarsEdge>>
          pEdgesContainer,
      const std::unordered_map<mars::common::Id,
                               std::shared_ptr<mars::topology::common::TopologyEntity>>
          pContainer,
      const std::string& markerFrame, const std::string nodeNamespace);

  void drawVertex(const std::unordered_map<mars::common::Id,
                                           std::shared_ptr<mars::topology::vertex::MarsVertex>>
                      pVerticesContainer,
                  const std::string& markerFrame);

  void
  fillFootPrints(const std::unordered_map<mars::common::Id,
                                          std::shared_ptr<mars::topology::common::TopologyEntity>>
                     pContainer,
                 const ros::Publisher& markerPub, const std::string& markerFrame);
  void callbackInteractiveMarkerContainerId(
      const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);
  void callbackInteractiveMarkerContainerName(
      const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);
  void callbackInteractiveMarkerNodeId(

      const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);
  void callbackInteractiveMarkerNodeName(

      const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);
  void callbackInteractiveMarkerNodeReservations(

      const visualization_msgs::InteractiveMarkerFeedbackConstPtr& feedback);

private:
  /**
   * @brief mEngine Engine for random numbers in order to generate non
   * overlapping ids for the visualization marker.
   */
  std::mt19937 mEngine;

  /**
   * @brief mDistribution Distribution type to be generated by the random
   * engine.
   */
  std::uniform_int_distribution<uint32_t> mDistribution;

  mars::topology::common::utility::EntityVisualization mEntityVisualization;

  std::string mContainerId;
  std::string mContainerName;

  bool mContainerIdSet;
  bool mMarkerMenuInitialized;

  std::vector<std::shared_ptr<mars::topology::common::TopologyEntity>> mContainerEntities;

  boost::shared_ptr<interactive_markers::InteractiveMarkerServer> mInteractiveMarkerServer;
  interactive_markers::MenuHandler mMenuHandler;

  void makeMenuMarker(visualization_msgs::InteractiveMarker& interactiveMarker,
                      const visualization_msgs::Marker& entityMarker);

  visualization_msgs::InteractiveMarker makeEmptyMarker(const std::string& markerFrame);

  void initFootprintMenu();
};
} // namespace container
} // namespace topology
} // namespace mars
#endif
